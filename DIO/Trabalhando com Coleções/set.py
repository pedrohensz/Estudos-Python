# üêç Conjuntos em Python

# Conjuntos s√£o cole√ß√µes n√£o ordenadas e mut√°veis, usadas para armazenar elementos √∫nicos (sem duplicatas).

# Criando Conjuntos
numeros = {1, 2, 3, 4}            # Conjunto com inteiros
frutas = {"ma√ß√£", "banana", "laranja"}  # Conjunto com strings

# Acessando elementos do conjunto
# Conjuntos n√£o t√™m √≠ndice, ent√£o n√£o podemos acessar por posi√ß√£o, mas podemos iterar sobre os elementos:
for fruta in frutas:
    print(fruta)  # Imprime cada item do conjunto

# Adicionando elementos ao conjunto
frutas.add("uva")  # Adiciona "uva" ao conjunto

# Removendo elementos do conjunto
# Usando remove() - Remove o elemento, mas gera erro se o elemento n√£o existir
frutas.remove("banana")  # Remove "banana" do conjunto

# Usando discard() - Remove o elemento sem gerar erro, mesmo que o elemento n√£o exista
frutas.discard("abacaxi")  # N√£o gera erro, mesmo se "abacaxi" n√£o estiver no conjunto

# Verificando se um elemento est√° no conjunto
if "ma√ß√£" in frutas:
    print("Ma√ß√£ est√° no conjunto!")  # Condicional para verificar a presen√ßa

# Opera√ß√µes com Conjuntos
# Uni√£o: Combina os elementos de dois conjuntos
conjunto1 = {1, 2, 3}
conjunto2 = {3, 4, 5}
uniao = conjunto1 | conjunto2  # Resultado: {1, 2, 3, 4, 5}
print("Uni√£o:", uniao)

# Interse√ß√£o: Retorna os elementos comuns entre dois conjuntos
interseccao = conjunto1 & conjunto2  # Resultado: {3}
print("Interse√ß√£o:", interseccao)

# Diferen√ßa: Retorna os elementos do primeiro conjunto que n√£o est√£o no segundo
diferenca = conjunto1 - conjunto2  # Resultado: {1, 2}
print("Diferen√ßa:", diferenca)

# Diferen√ßa Sim√©trica: Retorna os elementos que est√£o em um dos conjuntos, mas n√£o em ambos
dif_simetrica = conjunto1 ^ conjunto2  # Resultado: {1, 2, 4, 5}
print("Diferen√ßa Sim√©trica:", dif_simetrica)

# Fun√ß√µes √∫teis com Conjuntos
# len() - Retorna o n√∫mero de elementos no conjunto
print("N√∫mero de elementos em frutas:", len(frutas))

# clear() - Remove todos os elementos do conjunto
frutas.clear()  # Agora o conjunto est√° vazio
print("Conjunto ap√≥s clear:", frutas)

# copy() - Cria uma c√≥pia do conjunto
frutas_copy = frutas.copy()  # C√≥pia do conjunto
print("C√≥pia do conjunto:", frutas_copy)

# Observa√ß√µes
# - Conjuntos n√£o permitem elementos duplicados. Se voc√™ tentar adicionar um valor j√° existente, ele ser√° ignorado.
# - A ordem dos elementos em um conjunto n√£o √© garantida, ou seja, os elementos n√£o t√™m √≠ndice fixo.